import type * as theia from '@theia/plugin';
import { TreeDeltaBuilder } from '@theia/test/lib/common/tree-delta';
import { TestControllerImpl } from './tests';
export declare class TestTagImpl {
    readonly id: string;
    constructor(id: string);
}
export declare class TestItemImpl implements theia.TestItem {
    readonly id: string;
    readonly uri: theia.Uri | undefined;
    constructor(id: string, uri: theia.Uri | undefined, label: string);
    protected notifyPropertyChange(property: keyof TestItemImpl, value: any): void;
    _deltaBuilder: TreeDeltaBuilder<string, TestItemImpl> | undefined;
    get deltaBuilder(): TreeDeltaBuilder<string, TestItemImpl> | undefined;
    _path: string[] | undefined;
    get path(): string[];
    private _parent?;
    get realParent(): TestItemImpl | TestControllerImpl | undefined;
    set realParent(v: TestItemImpl | TestControllerImpl | undefined);
    get parent(): TestItemImpl | undefined;
    protected iterate(toDo: (v: TestItemImpl) => boolean): boolean;
    children: TestItemCollection;
    tags: readonly theia.TestTag[];
    canResolveChildren: boolean;
    busy: boolean;
    label: string;
    description?: string | undefined;
    sortText?: string | undefined;
    range: theia.Range | undefined;
    error: string | theia.MarkdownString | undefined;
}
export declare class TestItemCollection implements theia.TestItemCollection {
    private owner;
    protected readonly pathOf: (v: TestItemImpl) => string[];
    protected readonly deltaBuilder: (v: TestItemImpl | TestControllerImpl | undefined) => TreeDeltaBuilder<string, TestItemImpl> | undefined;
    constructor(owner: TestItemImpl | TestControllerImpl, pathOf: (v: TestItemImpl) => string[], deltaBuilder: (v: TestItemImpl | TestControllerImpl | undefined) => TreeDeltaBuilder<string, TestItemImpl> | undefined);
    private readonly values;
    get size(): number;
    replace(items: readonly theia.TestItem[]): void;
    forEach(callback: (item: theia.TestItem, collection: theia.TestItemCollection) => unknown, thisArg?: unknown): void;
    add(item: theia.TestItem): void;
    delete(itemId: string): void;
    get(itemId: string): theia.TestItem | undefined;
    [Symbol.iterator](): Iterator<[id: string, testItem: theia.TestItem], unknown, undefined>;
    find(path: string[]): theia.TestItem | undefined;
}
//# sourceMappingURL=test-item.d.ts.map