"use strict";
// *****************************************************************************
// Copyright (C) 2023 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PluginIconService = void 0;
const dom_1 = require("@theia/monaco-editor-core/esm/vs/base/browser/dom");
const browser_1 = require("@theia/core/lib/browser");
const disposable_1 = require("@theia/core/lib/common/disposable");
const iconRegistry_1 = require("@theia/monaco-editor-core/esm/vs/platform/theme/common/iconRegistry");
const inversify_1 = require("@theia/core/shared/inversify");
const vscode_uri_1 = require("@theia/core/shared/vscode-uri");
const monaco_icon_registry_1 = require("@theia/monaco/lib/browser/monaco-icon-registry");
const path = require("path");
const plugin_protocol_1 = require("../../common/plugin-protocol");
const iconsStyleSheet_1 = require("@theia/monaco-editor-core/esm/vs/platform/theme/browser/iconsStyleSheet");
let PluginIconService = class PluginIconService {
    constructor() {
        this.toDispose = new disposable_1.DisposableCollection();
        this.styleSheet = '';
    }
    register(contribution, plugin) {
        const defaultIcon = contribution.defaults;
        if (plugin_protocol_1.IconContribution.isIconDefinition(defaultIcon)) {
            this.registerFontIcon(contribution, defaultIcon);
        }
        else {
            this.registerRegularIcon(contribution, defaultIcon.id);
        }
        this.updateStyle(contribution);
        return disposable_1.Disposable.NULL;
    }
    updateStyle(contribution) {
        this.updateStyleElement();
        const css = this.getCSS(contribution);
        if (css) {
            this.styleElement.innerText = css;
        }
        const toRemoveStyleElement = disposable_1.Disposable.create(() => this.styleElement.remove());
        this.toDispose.push(toRemoveStyleElement);
    }
    dispose() {
        this.toDispose.dispose();
    }
    registerFontIcon(contribution, defaultIcon) {
        const location = defaultIcon.location;
        const format = getFileExtension(location);
        const fontId = getFontId(contribution.extensionId, location);
        const definition = this.iconRegistry.registerIconFont(fontId, { src: [{ location: vscode_uri_1.URI.file(location), format }] });
        this.iconRegistry.registerIcon(contribution.id, {
            fontCharacter: defaultIcon.fontCharacter,
            font: {
                id: fontId,
                definition
            }
        }, contribution.description);
    }
    registerRegularIcon(contribution, defaultIconId) {
        this.iconRegistry.registerIcon(contribution.id, { id: defaultIconId }, contribution.description);
    }
    updateStyleElement() {
        if (!this.styleElement) {
            const styleElement = document.createElement('style');
            styleElement.type = 'text/css';
            styleElement.media = 'screen';
            styleElement.id = 'contributedIconsStyles';
            document.head.appendChild(styleElement);
            this.styleElement = styleElement;
        }
    }
    getCSS(iconContribution, themeService) {
        const iconRegistry = (0, iconRegistry_1.getIconRegistry)();
        const productIconTheme = themeService ? themeService.getProductIconTheme() : new iconsStyleSheet_1.UnthemedProductIconTheme();
        const usedFontIds = {};
        const formatIconRule = (contribution) => {
            const definition = productIconTheme.getIcon(contribution);
            if (!definition) {
                return undefined;
            }
            const fontContribution = definition.font;
            if (fontContribution) {
                usedFontIds[fontContribution.id] = fontContribution.definition;
                return `.codicon-${contribution.id}:before { content: '${definition.fontCharacter}'; font-family: ${(0, dom_1.asCSSPropertyValue)(iconContribution.extensionId)}; }`;
            }
            // default font (codicon)
            return `.codicon-${contribution.id}:before { content: '${definition.fontCharacter}'; }`;
        };
        const rules = [];
        for (const contribution of iconRegistry.getIcons()) {
            const rule = formatIconRule(contribution);
            if (rule) {
                rules.push(rule);
            }
        }
        for (const id in usedFontIds) {
            if (id) {
                const definition = usedFontIds[id];
                const fontWeight = definition.weight ? `font-weight: ${definition.weight};` : '';
                const fontStyle = definition.style ? `font-style: ${definition.style};` : '';
                const src = definition.src.map(icon => `${this.toPluginUrl(iconContribution.extensionId, getIconRelativePath(icon.location.path))} format('${icon.format}')`)
                    .join(', ');
                rules.push(`@font-face { src: ${src}; font-family: ${(0, dom_1.asCSSPropertyValue)(iconContribution.extensionId)};${fontWeight}${fontStyle} font-display: block; }`);
            }
        }
        return rules.join('\n');
    }
    toPluginUrl(id, relativePath) {
        return `url('${new browser_1.Endpoint({
            path: `hostedPlugin/${this.formatExtensionId(id)}/${encodeURIComponent(relativePath)}`
        }).getRestUrl().toString()}')`;
    }
    formatExtensionId(id) {
        return id.replace(/\W/g, '_');
    }
};
__decorate([
    (0, inversify_1.inject)(monaco_icon_registry_1.MonacoIconRegistry),
    __metadata("design:type", monaco_icon_registry_1.MonacoIconRegistry)
], PluginIconService.prototype, "iconRegistry", void 0);
PluginIconService = __decorate([
    (0, inversify_1.injectable)()
], PluginIconService);
exports.PluginIconService = PluginIconService;
function getIconRelativePath(iconPath) {
    const index = iconPath.indexOf('extension');
    return index === -1 ? '' : iconPath.substring(index + 'extension'.length + 1);
}
function getFontId(extensionId, fontPath) {
    return path.join(extensionId, fontPath);
}
function getFileExtension(filePath) {
    const index = filePath.lastIndexOf('.');
    return index === -1 ? '' : filePath.substring(index + 1);
}
//# sourceMappingURL=plugin-icon-service.js.map