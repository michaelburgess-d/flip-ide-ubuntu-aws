"use strict";
// *****************************************************************************
// Copyright (C) 2023 STMicroelectronics and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestViewContribution = exports.TEST_VIEW_CONTAINER_TITLE_OPTIONS = exports.TEST_VIEW_CONTAINER_ID = exports.TEST_VIEW_INLINE_MENU = exports.TEST_VIEW_CONTEXT_MENU = exports.TestViewCommands = void 0;
const browser_1 = require("@theia/core/lib/browser");
const core_1 = require("@theia/core");
const inversify_1 = require("@theia/core/shared/inversify");
const test_service_1 = require("../test-service");
const context_key_service_1 = require("@theia/core/lib/browser/context-key-service");
const test_tree_widget_1 = require("./test-tree-widget");
const navigation_location_service_1 = require("@theia/editor/lib/browser/navigation/navigation-location-service");
const navigation_location_1 = require("@theia/editor/lib/browser/navigation/navigation-location");
const file_service_1 = require("@theia/filesystem/lib/browser/file-service");
const file_navigator_commands_1 = require("@theia/navigator/lib/browser/file-navigator-commands");
var TestViewCommands;
(function (TestViewCommands) {
    /**
     * Command which refreshes all test.
     */
    TestViewCommands.REFRESH = core_1.Command.toDefaultLocalizedCommand({
        id: "testing.refreshTests" /* RefreshTestsAction */,
        label: 'Refresh Tests',
        category: 'Test',
        iconClass: (0, browser_1.codicon)('refresh')
    });
    /**
     * Command which cancels the refresh
     */
    TestViewCommands.CANCEL_REFRESH = core_1.Command.toDefaultLocalizedCommand({
        id: "testing.cancelTestRefresh" /* CancelTestRefreshAction */,
        label: 'Cancel Test Refresh',
        category: 'Test',
        iconClass: (0, browser_1.codicon)('stop')
    });
    TestViewCommands.RUN_ALL_TESTS = core_1.Command.toDefaultLocalizedCommand({
        id: "testing.runAll" /* RunAllAction */,
        label: 'Run All Tests',
        category: 'Test',
        iconClass: (0, browser_1.codicon)('run-all')
    });
    TestViewCommands.DEBUG_ALL_TESTS = core_1.Command.toDefaultLocalizedCommand({
        id: "testing.debugAll" /* DebugAllAction */,
        label: 'Debug Tests',
        category: 'Test',
        iconClass: (0, browser_1.codicon)('debug-all')
    });
    TestViewCommands.RUN_TEST = core_1.Command.toDefaultLocalizedCommand({
        id: "testing.run" /* RunAction */,
        label: 'Run Test',
        category: 'Test',
        iconClass: (0, browser_1.codicon)('run')
    });
    TestViewCommands.RUN_TEST_WITH_PROFILE = core_1.Command.toDefaultLocalizedCommand({
        id: "testing.runUsing" /* RunUsingProfileAction */,
        category: 'Test',
        label: 'Execute using Profile...'
    });
    TestViewCommands.DEBUG_TEST = core_1.Command.toDefaultLocalizedCommand({
        id: "testing.debug" /* DebugAction */,
        label: 'Debug Test',
        category: 'Test',
        iconClass: (0, browser_1.codicon)('debug-alt')
    });
    TestViewCommands.CANCEL_ALL_RUNS = core_1.Command.toLocalizedCommand({
        id: 'testing.cancelAllRuns',
        label: 'Cancel All Test Runs',
        category: 'Test',
        iconClass: (0, browser_1.codicon)('debug-stop')
    }, 'theia/test/cancelAllTestRuns', core_1.nls.getDefaultKey('Test'));
    TestViewCommands.CANCEL_RUN = core_1.Command.toDefaultLocalizedCommand({
        id: "testing.cancelRun" /* CancelTestRunAction */,
        label: 'Cancel Test Run',
        category: 'Test',
        iconClass: (0, browser_1.codicon)('debug-stop')
    });
    TestViewCommands.GOTO_TEST = core_1.Command.toDefaultLocalizedCommand({
        id: "testing.editFocusedTest" /* GoToTest */,
        label: 'Go to Test',
        category: 'Test',
        iconClass: (0, browser_1.codicon)('go-to-file')
    });
    TestViewCommands.CONFIGURE_PROFILES = core_1.Command.toDefaultLocalizedCommand({
        id: "testing.configureProfile" /* ConfigureTestProfilesAction */,
        label: 'Configure Test Profiles',
        category: 'Test'
    });
    TestViewCommands.CLEAR_ALL_RESULTS = core_1.Command.toDefaultLocalizedCommand({
        id: "testing.clearTestResults" /* ClearTestResultsAction */,
        label: 'Clear All Results',
        category: 'Test',
        iconClass: (0, browser_1.codicon)('trash')
    });
})(TestViewCommands = exports.TestViewCommands || (exports.TestViewCommands = {}));
exports.TEST_VIEW_CONTEXT_MENU = ['test-view-context-menu'];
exports.TEST_VIEW_INLINE_MENU = [...exports.TEST_VIEW_CONTEXT_MENU, 'inline'];
exports.TEST_VIEW_CONTAINER_ID = 'test-view-container';
exports.TEST_VIEW_CONTAINER_TITLE_OPTIONS = {
    label: core_1.nls.localizeByDefault('Testing'),
    iconClass: (0, browser_1.codicon)('beaker'),
    closeable: true
};
let TestViewContribution = class TestViewContribution extends browser_1.AbstractViewContribution {
    constructor() {
        super({
            viewContainerId: exports.TEST_VIEW_CONTAINER_ID,
            widgetId: test_tree_widget_1.TestTreeWidget.ID,
            widgetName: core_1.nls.localizeByDefault('Test Explorer'),
            defaultWidgetOptions: {
                area: 'left',
                rank: 600,
            }
        });
    }
    async initializeLayout() {
        await this.openView({ activate: false });
    }
    registerCommands(commands) {
        super.registerCommands(commands);
        commands.registerCommand(TestViewCommands.REFRESH, {
            isEnabled: w => this.withWidget(w, () => !this.testService.isRefreshing),
            isVisible: w => this.withWidget(w, () => !this.testService.isRefreshing),
            execute: () => this.testService.refresh()
        });
        commands.registerCommand(TestViewCommands.CANCEL_REFRESH, {
            isEnabled: w => this.withWidget(w, () => this.testService.isRefreshing),
            isVisible: w => this.withWidget(w, () => this.testService.isRefreshing),
            execute: () => this.testService.cancelRefresh()
        });
        commands.registerCommand(TestViewCommands.RUN_ALL_TESTS, {
            isEnabled: w => this.withWidget(w, () => true),
            isVisible: w => this.withWidget(w, () => true),
            execute: () => this.testService.runAllTests(test_service_1.TestRunProfileKind.Run)
        });
        commands.registerCommand(TestViewCommands.DEBUG_ALL_TESTS, {
            isEnabled: w => this.withWidget(w, () => true),
            isVisible: w => this.withWidget(w, () => true),
            execute: () => this.testService.runAllTests(test_service_1.TestRunProfileKind.Debug)
        });
        commands.registerCommand(TestViewCommands.RUN_TEST, {
            isEnabled: t => test_service_1.TestItem.is(t),
            isVisible: t => test_service_1.TestItem.is(t),
            execute: t => {
                this.testService.runTests(test_service_1.TestRunProfileKind.Run, [t]);
            }
        });
        commands.registerCommand(TestViewCommands.DEBUG_TEST, {
            isEnabled: t => test_service_1.TestItem.is(t),
            isVisible: t => test_service_1.TestItem.is(t),
            execute: t => {
                this.testService.runTests(test_service_1.TestRunProfileKind.Debug, [t]);
            }
        });
        commands.registerCommand(TestViewCommands.RUN_TEST_WITH_PROFILE, {
            isEnabled: t => test_service_1.TestItem.is(t),
            isVisible: t => test_service_1.TestItem.is(t),
            execute: t => {
                this.testService.runTestsWithProfile([t]);
            }
        });
        commands.registerCommand(TestViewCommands.CANCEL_ALL_RUNS, {
            isEnabled: w => this.withWidget(w, () => true),
            isVisible: w => this.withWidget(w, () => true),
            execute: () => this.cancelAllRuns()
        });
        commands.registerCommand(TestViewCommands.GOTO_TEST, {
            isEnabled: t => test_service_1.TestItem.is(t) && !!t.uri,
            isVisible: t => test_service_1.TestItem.is(t) && !!t.uri,
            execute: t => {
                if (test_service_1.TestItem.is(t)) {
                    this.fileSystem.resolve(t.uri).then(stat => {
                        if (stat.isFile) {
                            this.navigationService.reveal(navigation_location_1.NavigationLocation.create(t.uri, t.range ? t.range.start : { line: 0, character: 0 }));
                        }
                        else {
                            commands.executeCommand(file_navigator_commands_1.FileNavigatorCommands.REVEAL_IN_NAVIGATOR.id, t.uri);
                        }
                    });
                }
            }
        });
        commands.registerCommand(TestViewCommands.CONFIGURE_PROFILES, {
            execute: () => {
                this.testService.configureProfile();
            }
        });
    }
    cancelAllRuns() {
        this.testService.getControllers().forEach(controller => controller.testRuns.forEach(run => run.cancel()));
    }
    registerMenus(menus) {
        super.registerMenus(menus);
        menus.registerMenuAction(exports.TEST_VIEW_INLINE_MENU, {
            commandId: TestViewCommands.RUN_TEST.id,
            order: 'a'
        });
        menus.registerMenuAction(exports.TEST_VIEW_INLINE_MENU, {
            commandId: TestViewCommands.DEBUG_TEST.id,
            order: 'aa'
        });
        menus.registerMenuAction(exports.TEST_VIEW_INLINE_MENU, {
            commandId: TestViewCommands.GOTO_TEST.id,
            order: 'aaa'
        });
        menus.registerMenuAction(exports.TEST_VIEW_CONTEXT_MENU, {
            commandId: TestViewCommands.RUN_TEST_WITH_PROFILE.id,
            order: 'aaaa'
        });
    }
    registerToolbarItems(toolbar) {
        toolbar.registerItem({
            id: TestViewCommands.REFRESH.id,
            command: TestViewCommands.REFRESH.id,
            priority: 0,
            onDidChange: this.testService.onDidChangeIsRefreshing
        });
        toolbar.registerItem({
            id: TestViewCommands.CANCEL_REFRESH.id,
            command: TestViewCommands.CANCEL_REFRESH.id,
            priority: 0,
            onDidChange: this.testService.onDidChangeIsRefreshing
        });
        toolbar.registerItem({
            id: TestViewCommands.RUN_ALL_TESTS.id,
            command: TestViewCommands.RUN_ALL_TESTS.id,
            priority: 1
        });
        toolbar.registerItem({
            id: TestViewCommands.DEBUG_ALL_TESTS.id,
            command: TestViewCommands.DEBUG_ALL_TESTS.id,
            priority: 2
        });
        toolbar.registerItem({
            id: TestViewCommands.CANCEL_ALL_RUNS.id,
            command: TestViewCommands.CANCEL_ALL_RUNS.id,
            priority: 3
        });
    }
    withWidget(widget = this.tryGetWidget(), cb) {
        if (widget instanceof test_tree_widget_1.TestTreeWidget && widget.id === test_tree_widget_1.TestTreeWidget.ID) {
            return cb(widget);
        }
        return false;
    }
};
__decorate([
    (0, inversify_1.inject)(test_service_1.TestService),
    __metadata("design:type", Object)
], TestViewContribution.prototype, "testService", void 0);
__decorate([
    (0, inversify_1.inject)(context_key_service_1.ContextKeyService),
    __metadata("design:type", Object)
], TestViewContribution.prototype, "contextKeys", void 0);
__decorate([
    (0, inversify_1.inject)(navigation_location_service_1.NavigationLocationService),
    __metadata("design:type", navigation_location_service_1.NavigationLocationService)
], TestViewContribution.prototype, "navigationService", void 0);
__decorate([
    (0, inversify_1.inject)(file_service_1.FileService),
    __metadata("design:type", file_service_1.FileService)
], TestViewContribution.prototype, "fileSystem", void 0);
TestViewContribution = __decorate([
    (0, inversify_1.injectable)(),
    __metadata("design:paramtypes", [])
], TestViewContribution);
exports.TestViewContribution = TestViewContribution;
//# sourceMappingURL=test-view-contribution.js.map