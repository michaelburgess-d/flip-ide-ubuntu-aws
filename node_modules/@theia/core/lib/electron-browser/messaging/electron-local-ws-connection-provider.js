"use strict";
// *****************************************************************************
// Copyright (C) 2023 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElectronLocalWebSocketConnectionProvider = exports.getLocalPort = void 0;
const inversify_1 = require("inversify");
const ws_connection_provider_1 = require("../../browser/messaging/ws-connection-provider");
const endpoint_1 = require("../../browser/endpoint");
function getLocalPort() {
    var _a;
    const params = new URLSearchParams(location.search);
    return (_a = params.get('localPort')) !== null && _a !== void 0 ? _a : undefined;
}
exports.getLocalPort = getLocalPort;
let ElectronLocalWebSocketConnectionProvider = class ElectronLocalWebSocketConnectionProvider extends ws_connection_provider_1.WebSocketConnectionProvider {
    createEndpoint(path) {
        const localPort = getLocalPort();
        if (!localPort) {
            throw new Error('This should only be called in case there is a local port specified!');
        }
        const endpoint = new endpoint_1.Endpoint({
            path
        }, {
            host: `localhost:${localPort}`,
            pathname: '/',
            protocol: 'http',
            search: ''
        });
        return endpoint;
    }
};
ElectronLocalWebSocketConnectionProvider = __decorate([
    (0, inversify_1.injectable)()
], ElectronLocalWebSocketConnectionProvider);
exports.ElectronLocalWebSocketConnectionProvider = ElectronLocalWebSocketConnectionProvider;
//# sourceMappingURL=electron-local-ws-connection-provider.js.map